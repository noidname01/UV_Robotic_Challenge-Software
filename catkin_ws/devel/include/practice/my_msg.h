// Generated by gencpp from file practice/my_msg.msg
// DO NOT EDIT!


#ifndef PRACTICE_MESSAGE_MY_MSG_H
#define PRACTICE_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace practice
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : id(0)
    , title()
    , content()  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , title(_alloc)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title_type;
  _title_type title;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _content_type;
  _content_type content;





  typedef boost::shared_ptr< ::practice::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::practice::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::practice::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::practice::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::practice::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::practice::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::practice::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::practice::my_msg_<ContainerAllocator1> & lhs, const ::practice::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.title == rhs.title &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::practice::my_msg_<ContainerAllocator1> & lhs, const ::practice::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace practice

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::practice::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practice::my_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practice::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practice::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practice::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::practice::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e2cb8cf2c48e86d2e59515dd5faeb6a";
  }

  static const char* value(const ::practice::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e2cb8cf2c48e86dULL;
  static const uint64_t static_value2 = 0x2e59515dd5faeb6aULL;
};

template<class ContainerAllocator>
struct DataType< ::practice::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "practice/my_msg";
  }

  static const char* value(const ::practice::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::practice::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n"
"string title\n"
"string content\n"
;
  }

  static const char* value(const ::practice::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::practice::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.title);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::practice::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::practice::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACTICE_MESSAGE_MY_MSG_H
