// Generated by gencpp from file uv_robot_ros/cmdToRpiRequest.msg
// DO NOT EDIT!


#ifndef UV_ROBOT_ROS_MESSAGE_CMDTORPIREQUEST_H
#define UV_ROBOT_ROS_MESSAGE_CMDTORPIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uv_robot_ros
{
template <class ContainerAllocator>
struct cmdToRpiRequest_
{
  typedef cmdToRpiRequest_<ContainerAllocator> Type;

  cmdToRpiRequest_()
    : cmdType()
    , dist_or_deg()  {
    }
  cmdToRpiRequest_(const ContainerAllocator& _alloc)
    : cmdType(_alloc)
    , dist_or_deg(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmdType_type;
  _cmdType_type cmdType;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dist_or_deg_type;
  _dist_or_deg_type dist_or_deg;





  typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cmdToRpiRequest_

typedef ::uv_robot_ros::cmdToRpiRequest_<std::allocator<void> > cmdToRpiRequest;

typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiRequest > cmdToRpiRequestPtr;
typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiRequest const> cmdToRpiRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator1> & lhs, const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmdType == rhs.cmdType &&
    lhs.dist_or_deg == rhs.dist_or_deg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator1> & lhs, const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uv_robot_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f1394a6d86922d90d018be9bd88aab6";
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f1394a6d86922d9ULL;
  static const uint64_t static_value2 = 0x0d018be9bd88aab6ULL;
};

template<class ContainerAllocator>
struct DataType< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uv_robot_ros/cmdToRpiRequest";
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string cmdType\n"
"string dist_or_deg\n"
;
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmdType);
      stream.next(m.dist_or_deg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdToRpiRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uv_robot_ros::cmdToRpiRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmdType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmdType);
    s << indent << "dist_or_deg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dist_or_deg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UV_ROBOT_ROS_MESSAGE_CMDTORPIREQUEST_H
