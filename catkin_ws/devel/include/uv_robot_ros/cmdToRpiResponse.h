// Generated by gencpp from file uv_robot_ros/cmdToRpiResponse.msg
// DO NOT EDIT!


#ifndef UV_ROBOT_ROS_MESSAGE_CMDTORPIRESPONSE_H
#define UV_ROBOT_ROS_MESSAGE_CMDTORPIRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uv_robot_ros
{
template <class ContainerAllocator>
struct cmdToRpiResponse_
{
  typedef cmdToRpiResponse_<ContainerAllocator> Type;

  cmdToRpiResponse_()
    : isComplete(false)
    , errorMsg()  {
    }
  cmdToRpiResponse_(const ContainerAllocator& _alloc)
    : isComplete(false)
    , errorMsg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _isComplete_type;
  _isComplete_type isComplete;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _errorMsg_type;
  _errorMsg_type errorMsg;





  typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> const> ConstPtr;

}; // struct cmdToRpiResponse_

typedef ::uv_robot_ros::cmdToRpiResponse_<std::allocator<void> > cmdToRpiResponse;

typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiResponse > cmdToRpiResponsePtr;
typedef boost::shared_ptr< ::uv_robot_ros::cmdToRpiResponse const> cmdToRpiResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator1> & lhs, const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator2> & rhs)
{
  return lhs.isComplete == rhs.isComplete &&
    lhs.errorMsg == rhs.errorMsg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator1> & lhs, const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uv_robot_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6ac61039326de273907480d4c529a6e";
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6ac61039326de27ULL;
  static const uint64_t static_value2 = 0x3907480d4c529a6eULL;
};

template<class ContainerAllocator>
struct DataType< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uv_robot_ros/cmdToRpiResponse";
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isComplete\n"
"string errorMsg\n"
"\n"
;
  }

  static const char* value(const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isComplete);
      stream.next(m.errorMsg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdToRpiResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uv_robot_ros::cmdToRpiResponse_<ContainerAllocator>& v)
  {
    s << indent << "isComplete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isComplete);
    s << indent << "errorMsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errorMsg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UV_ROBOT_ROS_MESSAGE_CMDTORPIRESPONSE_H
